<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="PtbProducto.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABGdBTUEAALGPC/xhBQAABMRJREFUeF7t
        m39MG2UYx0lcYoxmOhcTErc/jPFHNBksIWs31GBcwv5w/LVgNGLMFsxgGFdxTGSdrpWhCyIuMTKGjpnN
        bAYMyzLs/AFaCBsr2MYCvW5l4GQJzNFi2dimwOs97XPNy+0pxeTe9pT7Jp8Ejut9v9/n7n3JJZBmyJAh
        Q4YMGTIkSrnOi2seP9Z5Nr3BEb7z4+aZtH3H2XzcUdM0c09da2j5lz+1P/attAov899T0YVw3vbByd5C
        7xhZdCFknrnMzJ5gu9kdysHL6l9K8dKLk0xh5aHvyYLzsayxjZk8wRi6H8TWQDhbXVxhQ5uPLDkfD5/q
        mzMAfhDr3KFMtE292nPYkgNv9/fzhY9ducFart6MfV8iBcmS85HlGiMHoGB/udcF3hgjNTr6VMeyIxbv
        +GlLX6Ro5aVrLDA1zRTBIOD4tsAkSz/cThaleOCIkyzN05DlZNV53aNfr++5F+MkX59bfSNQHoA7PjU9
        i9WjavrjJts4MBEJ/ERbgCxLAeeqC6uBAQC2gt4AxkmuPvxk8COlfMAxhpWjgkHUXr5+W+ilB78jC/PA
        OerPUSgDAEp3DtgxVnJU1jyy4kS5bwbKd1UHsHZUQzemWYH0Jxka1vXdn7WSxQH4WaK1r8APYP9zXX+/
        emgoHeOJ1/73/d1Q/sd3BtjU+C2sztjZ8F9kWDWww8OdXlLTHAG+jrfrx4MfAFBe7GnDeGJV3vhb9ilL
        /ywMYPjnq1idsevyY7/eGyLDikA9gLp1nbNv7ZIewpjiVF95fkhZ+7wqhq+RQUWhHgCwu9Djw5hitKdu
        8MXTb0bL80/A+ZOjZEiRUAM4uMbJysqkZzGu9jps908o5RUcr3vZF+YOMqRIqAEA9oJfrmBcbVVZO7hT
        XR44nncuYkyFFIm6OM8bFb4SjK2dvrL5w+ryrUW/xkypkCLhC6upyneNYmzt1FThu6UewNHcMzFTKqRI
        +MJqqjd2T2Fs7fSp3e/iy5/c7JljSoUUCe+txlrocWJs7QS//x2l0fKw8TVmd84xpUKKhPfmqTc52a4d
        A49gbG3V8K70+zcv9d5WHqBCikTtr7DnFYEvR8V7L2yhTAEqpEioDIDFKuVjXDGq2tQzyRvuze8J2rZ4
        VlMhRWLb3JdRJXvzWT7Y5AphTHHatlsqqjd1RAwrX+gJb63xPwjHqZAiAU/wlm9AGLIcWNvBimy+1+C4
        cFms/qdhOeS4Q/fhoZQMAAQZiu3+whKrlI2HUiMqpEjQVj+iQooEbfUjKqRI0FY/okKKBG31IyqkSNBW
        P6JCak1W1yWW6fCyVS3di28Aq3/wRYoroK1+RIXWCrjzfPlFNwDlsV+0A1CXNwZgDMAYgDEAtNWPqOBa
        YQzAGIAxgP//APgXnYWAtvoRVWqhqF90FgLa6kcmd3CCKpcI6kUnERkt50bQVj8yu8ffowom4t889jFO
        uPahrb5kco/Xmt3BYapoPMiCcYA7r9vyhgwZukvmfuRRJEtmLcczMs8nAM7hPwPXUK6nXB+8Uq6lMvCH
        iRAyV4YqIxLwBG/IAFmSqgwZKlQqgUxJE/zHBhUilTwpk1TxS2CDDBVKJOCZsiVACTam5Ui8TRCgyvCo
        z+c3QeX6Gm2CaWn/ANnSHA+WYzUhAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="LblVestimenta.BaseStylesheet" xml:space="preserve">
    <value>#bunifu-label { padding: 0px; font-family: 'Impact'; font-size: 12pt; width: 100%; height: 100%; font-style: normal; font-weight: normal; text-decoration: none; color: rgb(169, 169, 169); text-align: left; }</value>
  </data>
</root>